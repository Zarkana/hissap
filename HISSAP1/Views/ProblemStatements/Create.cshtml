@model HISSAP1.ViewModels.ProblemStatementViewModel

@{
  ViewBag.Title = "Create";
}

<h2 class="buddy-header">Create ProblemStatement</h2>
<div class="buddy-link">
  @Html.ActionLink("Back to List", "Index")
</div>


@using (Html.BeginForm())
{
  @Html.AntiForgeryToken()

  <div class="form-horizontal form-problem-statement">
    <h4>Problem Statement Information</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @*<div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
          @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
      </div>*@

    <div class="form-group">
      @Html.LabelFor(model => model.ProblemStatementDescription, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.TextAreaFor(model => model.ProblemStatementDescription, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.ProblemStatementDescription, "", new { @class = "text-danger" })
      </div>
    </div>

    <h4>Details</h4>
    <hr />
    <div class="form-group">
      @Html.LabelFor(model => model.Consequences, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.TextAreaFor(model => model.Consequences, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Consequences, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Resources, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.TextAreaFor(model => model.Resources, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Resources, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Gaps, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.TextAreaFor(model => model.Gaps, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Gaps, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.DataSources, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="index-list">
        @for (int i = 0; i < Model.DataSources.Count(); i++)
        {
          @Html.EditorFor(m => Model.DataSources[i].Checked)
          <span class="checkbox-description">
            @Html.DisplayFor(m => Model.DataSources[i].Name)
          </span>
            <br />

            @Html.HiddenFor(m => Model.DataSources[i].Name)
            @Html.HiddenFor(m => Model.DataSources[i].Id)
        }
      </div>
    </div>

    <div class="form-group">
      <div class="col-md-offset-2 col-md-10">
        <input type="submit" value="Create" class="btn btn-default" />
      </div>
    </div>
  </div>
}

<div>
  @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
}
